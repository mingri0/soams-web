package sckj.soams.mapping;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

import sckj.soams.bean.MemoryLogsBean;
import sckj.soams.bean.MemorySwapBean;
import sckj.soams.entity.MemoryLogs;

public interface MemoryLogsMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table memory_logs
     *
     * @mbggenerated
     */
    @Delete({
        "delete from memory_logs",
        "where recdt = #{recdt,jdbcType=TIMESTAMP}",
          "and hostid = #{hostid,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(@Param("recdt") Date recdt, @Param("hostid") String hostid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table memory_logs
     *
     * @mbggenerated
     */
    @Insert({
        "insert into memory_logs (recdt, hostid, ",
        "total, used, free)",
        "values (#{recdt,jdbcType=TIMESTAMP}, #{hostid,jdbcType=VARCHAR}, ",
        "#{total,jdbcType=VARCHAR}, #{used,jdbcType=VARCHAR}, #{free,jdbcType=VARCHAR})"
    })
    int insert(MemoryLogs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table memory_logs
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "recdt, hostid, total, used, free",
        "from memory_logs",
        "where recdt = #{recdt,jdbcType=TIMESTAMP}",
          "and hostid = #{hostid,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="recdt", property="recdt", jdbcType=JdbcType.TIMESTAMP, id=true),
        @Result(column="hostid", property="hostid", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="total", property="total", jdbcType=JdbcType.VARCHAR),
        @Result(column="used", property="used", jdbcType=JdbcType.VARCHAR),
        @Result(column="free", property="free", jdbcType=JdbcType.VARCHAR)
    })
    MemoryLogs selectByPrimaryKey(@Param("recdt") Date recdt, @Param("hostid") String hostid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table memory_logs
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "recdt, hostid, total, used, free",
        "from memory_logs"
    })
    @Results({
        @Result(column="recdt", property="recdt", jdbcType=JdbcType.TIMESTAMP, id=true),
        @Result(column="hostid", property="hostid", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="total", property="total", jdbcType=JdbcType.VARCHAR),
        @Result(column="used", property="used", jdbcType=JdbcType.VARCHAR),
        @Result(column="free", property="free", jdbcType=JdbcType.VARCHAR)
    })
    List<MemoryLogs> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table memory_logs
     *
     * @mbggenerated
     */
    @Update({
        "update memory_logs",
        "set total = #{total,jdbcType=VARCHAR},",
          "used = #{used,jdbcType=VARCHAR},",
          "free = #{free,jdbcType=VARCHAR}",
        "where recdt = #{recdt,jdbcType=TIMESTAMP}",
          "and hostid = #{hostid,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(MemoryLogs record);

    @Select({
        "select recdt,mem,swap,memtot,swaptot from (select",
        "a.recdt,a.used mem,a.total memtot,b.used swap,b.total swaptot",
        "from memory_logs a,mem_swap_logs b",
        "where a.hostid = #{hostid} and a.hostid=b.hostid and a.recdt=b.recdt order by recdt desc limit 0,#{size}) c order by recdt asc"
    })
    @Results({
        @Result(column="recdt", property="recdt", jdbcType=JdbcType.TIMESTAMP, id=true),
        @Result(column="mem", property="mem", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="swap", property="swap", jdbcType=JdbcType.VARCHAR)
    })
	List<MemorySwapBean> getLastMemLogs(Map<String, Object> map);
    
    @Select({
        "select recdt,hostid,total,used,free,used/total bfb from memory_logs ",
        "where hostid = #{hostid} order by recdt desc limit 0,#{size}"
    })
    @Results({
    	@Result(column="recdt", property="recdt", jdbcType=JdbcType.TIMESTAMP, id=true),
        @Result(column="hostid", property="hostid", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="total", property="total", jdbcType=JdbcType.VARCHAR),
        @Result(column="used", property="used", jdbcType=JdbcType.VARCHAR),
        @Result(column="free", property="free", jdbcType=JdbcType.VARCHAR),
        @Result(column="bfb", property="bfb", jdbcType=JdbcType.DECIMAL)
    })
	List<MemoryLogsBean> getLastMemLogsBean(Map<String, Object> map);
}