package sckj.soams.mapping;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

import sckj.soams.entity.HostCpuLogs;

public interface HostCpuLogsMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table host_cpu_logs
     *
     * @mbggenerated
     */
    @Delete({
        "delete from host_cpu_logs",
        "where recdt = #{recdt,jdbcType=TIMESTAMP}",
          "and hostid = #{hostid,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(@Param("recdt") Date recdt, @Param("hostid") String hostid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table host_cpu_logs
     *
     * @mbggenerated
     */
    @Insert({
        "insert into host_cpu_logs (recdt, hostid, ",
        "user, sys, idle, ",
        "wait, nice, combined)",
        "values (#{recdt,jdbcType=TIMESTAMP}, #{hostid,jdbcType=VARCHAR}, ",
        "#{user,jdbcType=VARCHAR}, #{sys,jdbcType=VARCHAR}, #{idle,jdbcType=VARCHAR}, ",
        "#{wait,jdbcType=VARCHAR}, #{nice,jdbcType=VARCHAR}, #{combined,jdbcType=VARCHAR})"
    })
    int insert(HostCpuLogs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table host_cpu_logs
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "recdt, hostid, user, sys, idle, wait, nice, combined",
        "from host_cpu_logs",
        "where recdt = #{recdt,jdbcType=TIMESTAMP}",
          "and hostid = #{hostid,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="recdt", property="recdt", jdbcType=JdbcType.TIMESTAMP, id=true),
        @Result(column="hostid", property="hostid", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="user", property="user", jdbcType=JdbcType.VARCHAR),
        @Result(column="sys", property="sys", jdbcType=JdbcType.VARCHAR),
        @Result(column="idle", property="idle", jdbcType=JdbcType.VARCHAR),
        @Result(column="wait", property="wait", jdbcType=JdbcType.VARCHAR),
        @Result(column="nice", property="nice", jdbcType=JdbcType.VARCHAR),
        @Result(column="combined", property="combined", jdbcType=JdbcType.VARCHAR)
    })
    HostCpuLogs selectByPrimaryKey(@Param("recdt") Date recdt, @Param("hostid") String hostid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table host_cpu_logs
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "recdt, hostid, user, sys, idle, wait, nice, combined",
        "from host_cpu_logs"
    })
    @Results({
        @Result(column="recdt", property="recdt", jdbcType=JdbcType.TIMESTAMP, id=true),
        @Result(column="hostid", property="hostid", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="user", property="user", jdbcType=JdbcType.VARCHAR),
        @Result(column="sys", property="sys", jdbcType=JdbcType.VARCHAR),
        @Result(column="idle", property="idle", jdbcType=JdbcType.VARCHAR),
        @Result(column="wait", property="wait", jdbcType=JdbcType.VARCHAR),
        @Result(column="nice", property="nice", jdbcType=JdbcType.VARCHAR),
        @Result(column="combined", property="combined", jdbcType=JdbcType.VARCHAR)
    })
    List<HostCpuLogs> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table host_cpu_logs
     *
     * @mbggenerated
     */
    @Update({
        "update host_cpu_logs",
        "set user = #{user,jdbcType=VARCHAR},",
          "sys = #{sys,jdbcType=VARCHAR},",
          "idle = #{idle,jdbcType=VARCHAR},",
          "wait = #{wait,jdbcType=VARCHAR},",
          "nice = #{nice,jdbcType=VARCHAR},",
          "combined = #{combined,jdbcType=VARCHAR}",
        "where recdt = #{recdt,jdbcType=TIMESTAMP}",
          "and hostid = #{hostid,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(HostCpuLogs record);

    @Select({
    	"select recdt, hostid, user, sys, idle, wait, nice, combined",
    	" from (select recdt, hostid, user, sys, idle, wait, nice, combined ",
    	"  from host_cpu_logs where hostid=#{hostid} ",
    	"order by recdt desc limit 0,#{size}) a order by a.recdt desc"
    })
    @Results({
        @Result(column="recdt", property="recdt", jdbcType=JdbcType.TIMESTAMP, id=true),
        @Result(column="hostid", property="hostid", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="user", property="user", jdbcType=JdbcType.VARCHAR),
        @Result(column="sys", property="sys", jdbcType=JdbcType.VARCHAR),
        @Result(column="idle", property="idle", jdbcType=JdbcType.VARCHAR),
        @Result(column="wait", property="wait", jdbcType=JdbcType.VARCHAR),
        @Result(column="nice", property="nice", jdbcType=JdbcType.VARCHAR),
        @Result(column="combined", property="combined", jdbcType=JdbcType.VARCHAR)
    })
	List<HostCpuLogs> getLastCpuLogs(Map map);
    
    @Select({
    	"select recdt, hostid, user, sys, idle, wait, nice, combined",
    	"  from host_cpu_logs where hostid=#{hostid} ",
    	"order by recdt desc limit 0,#{size}"
    })
    @Results({
        @Result(column="recdt", property="recdt", jdbcType=JdbcType.TIMESTAMP, id=true),
        @Result(column="hostid", property="hostid", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="user", property="user", jdbcType=JdbcType.VARCHAR),
        @Result(column="sys", property="sys", jdbcType=JdbcType.VARCHAR),
        @Result(column="idle", property="idle", jdbcType=JdbcType.VARCHAR),
        @Result(column="wait", property="wait", jdbcType=JdbcType.VARCHAR),
        @Result(column="nice", property="nice", jdbcType=JdbcType.VARCHAR),
        @Result(column="combined", property="combined", jdbcType=JdbcType.VARCHAR)
    })
	List<HostCpuLogs> getLastCpuLogsDTO(Map map);
}