package sckj.soams.mapping;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

import sckj.soams.bean.InvokeChainBean;
import sckj.soams.bean.PageBean;
import sckj.soams.entity.InvokeChain;

public interface InvokeChainMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table invokechain
     *
     * @mbggenerated
     */
    @Delete({
        "delete from invokechain",
        "where invoke_seq = #{invoke_seq,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long invoke_seq);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table invokechain
     *
     * @mbggenerated
     */
    @Insert({
        "insert into invokechain (invoke_seq, invoke_dt, ",
        "application, fromip, ",
        "ip, traceid, fromrpcid, ",
        "rpcid, method, status, ",
        "type, requesturl, ",
        "timeelapsed, createdt)",
        "values (#{invoke_seq,jdbcType=BIGINT}, #{invoke_dt,jdbcType=VARCHAR}, ",
        "#{application,jdbcType=VARCHAR}, #{fromip,jdbcType=VARCHAR}, ",
        "#{ip,jdbcType=VARCHAR}, #{traceid,jdbcType=VARCHAR}, #{fromrpcid,jdbcType=VARCHAR}, ",
        "#{rpcid,jdbcType=VARCHAR}, #{method,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, ",
        "#{type,jdbcType=VARCHAR}, #{requesturl,jdbcType=VARCHAR}, ",
        "#{timeelapsed,jdbcType=VARCHAR}, #{createdt,jdbcType=TIMESTAMP})"
    })
    int insert(InvokeChain record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table invokechain
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "invoke_seq, invoke_dt, application, fromip, ip, traceid, fromrpcid, rpcid, method, ",
        "status, type, requesturl, timeelapsed, createdt",
        "from invokechain",
        "where invoke_seq = #{invoke_seq,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="invoke_seq", property="invoke_seq", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="invoke_dt", property="invoke_dt", jdbcType=JdbcType.VARCHAR),
        @Result(column="application", property="application", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromip", property="fromip", jdbcType=JdbcType.VARCHAR),
        @Result(column="ip", property="ip", jdbcType=JdbcType.VARCHAR),
        @Result(column="traceid", property="traceid", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromrpcid", property="fromrpcid", jdbcType=JdbcType.VARCHAR),
        @Result(column="rpcid", property="rpcid", jdbcType=JdbcType.VARCHAR),
        @Result(column="method", property="method", jdbcType=JdbcType.VARCHAR),
        @Result(column="status", property="status", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.VARCHAR),
        @Result(column="requesturl", property="requesturl", jdbcType=JdbcType.VARCHAR),
        @Result(column="timeelapsed", property="timeelapsed", jdbcType=JdbcType.VARCHAR),
        @Result(column="createdt", property="createdt", jdbcType=JdbcType.TIMESTAMP)
    })
    InvokeChain selectByPrimaryKey(Long invoke_seq);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table invokechain
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "invoke_seq, invoke_dt, application, fromip, ip, traceid, fromrpcid, rpcid, method, ",
        "status, type, requesturl, timeelapsed, createdt",
        "from invokechain"
    })
    @Results({
        @Result(column="invoke_seq", property="invoke_seq", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="invoke_dt", property="invoke_dt", jdbcType=JdbcType.VARCHAR),
        @Result(column="application", property="application", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromip", property="fromip", jdbcType=JdbcType.VARCHAR),
        @Result(column="ip", property="ip", jdbcType=JdbcType.VARCHAR),
        @Result(column="traceid", property="traceid", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromrpcid", property="fromrpcid", jdbcType=JdbcType.VARCHAR),
        @Result(column="rpcid", property="rpcid", jdbcType=JdbcType.VARCHAR),
        @Result(column="method", property="method", jdbcType=JdbcType.VARCHAR),
        @Result(column="status", property="status", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.VARCHAR),
        @Result(column="requesturl", property="requesturl", jdbcType=JdbcType.VARCHAR),
        @Result(column="timeelapsed", property="timeelapsed", jdbcType=JdbcType.VARCHAR),
        @Result(column="createdt", property="createdt", jdbcType=JdbcType.TIMESTAMP)
    })
    List<InvokeChain> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table invokechain
     *
     * @mbggenerated
     */
    @Update({
        "update invokechain",
        "set invoke_dt = #{invoke_dt,jdbcType=VARCHAR},",
          "application = #{application,jdbcType=VARCHAR},",
          "fromip = #{fromip,jdbcType=VARCHAR},",
          "ip = #{ip,jdbcType=VARCHAR},",
          "traceid = #{traceid,jdbcType=VARCHAR},",
          "fromrpcid = #{fromrpcid,jdbcType=VARCHAR},",
          "rpcid = #{rpcid,jdbcType=VARCHAR},",
          "method = #{method,jdbcType=VARCHAR},",
          "status = #{status,jdbcType=VARCHAR},",
          "type = #{type,jdbcType=VARCHAR},",
          "requesturl = #{requesturl,jdbcType=VARCHAR},",
          "timeelapsed = #{timeelapsed,jdbcType=VARCHAR},",
          "createdt = #{createdt,jdbcType=TIMESTAMP}",
        "where invoke_seq = #{invoke_seq,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(InvokeChain record);

    @Select({
    	"select * from invokechain where type='CONTROLLER' and rpcid='0.1' order by invoke_seq desc limit ${start},${end}"
    })
    @Results({
        @Result(column="invoke_seq", property="invoke_seq", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="invoke_dt", property="invoke_dt", jdbcType=JdbcType.VARCHAR),
        @Result(column="application", property="application", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromip", property="fromip", jdbcType=JdbcType.VARCHAR),
        @Result(column="ip", property="ip", jdbcType=JdbcType.VARCHAR),
        @Result(column="traceid", property="traceid", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromrpcid", property="fromrpcid", jdbcType=JdbcType.VARCHAR),
        @Result(column="rpcid", property="rpcid", jdbcType=JdbcType.VARCHAR),
        @Result(column="method", property="method", jdbcType=JdbcType.VARCHAR),
        @Result(column="status", property="status", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.VARCHAR),
        @Result(column="requesturl", property="requesturl", jdbcType=JdbcType.VARCHAR),
        @Result(column="timeelapsed", property="timeelapsed", jdbcType=JdbcType.VARCHAR),
        @Result(column="createdt", property="createdt", jdbcType=JdbcType.TIMESTAMP)
    })
	List<InvokeChain> selectInvokeChainRecordsByPage(PageBean pb);
    
    @Select({
    	"SELECT * FROM invokechain  WHERE rpcid='0.1' AND TYPE='CONTROLLER' order by cast(replace(timeelapsed,' ms','') as SIGNED) desc limit ${start},${end}"
    })
    @Results({
        @Result(column="invoke_seq", property="invoke_seq", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="invoke_dt", property="invoke_dt", jdbcType=JdbcType.VARCHAR),
        @Result(column="application", property="application", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromip", property="fromip", jdbcType=JdbcType.VARCHAR),
        @Result(column="ip", property="ip", jdbcType=JdbcType.VARCHAR),
        @Result(column="traceid", property="traceid", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromrpcid", property="fromrpcid", jdbcType=JdbcType.VARCHAR),
        @Result(column="rpcid", property="rpcid", jdbcType=JdbcType.VARCHAR),
        @Result(column="method", property="method", jdbcType=JdbcType.VARCHAR),
        @Result(column="status", property="status", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.VARCHAR),
        @Result(column="requesturl", property="requesturl", jdbcType=JdbcType.VARCHAR),
        @Result(column="timeelapsed", property="timeelapsed", jdbcType=JdbcType.VARCHAR),
        @Result(column="createdt", property="createdt", jdbcType=JdbcType.TIMESTAMP)
    })
    List<InvokeChain> selectInvokeSlowRecordsByPage(PageBean pb);
    
    @Select({
    	"select a.*,substring_index(a.rpcid,'.',1) lev,substring_index(a.rpcid,'.',-1) ind from invokechain a,(select traceid,rpcid from invokechain where",
    	"invoke_seq=#{invokeseq,jdbcType=BIGINT}) b where a.traceid=b.traceid",
    	"order by a.rpcid"
    })
    @Results({
        @Result(column="invoke_seq", property="invoke_seq", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="invoke_dt", property="invoke_dt", jdbcType=JdbcType.VARCHAR),
        @Result(column="application", property="application", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromip", property="fromip", jdbcType=JdbcType.VARCHAR),
        @Result(column="ip", property="ip", jdbcType=JdbcType.VARCHAR),
        @Result(column="traceid", property="traceid", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromrpcid", property="fromrpcid", jdbcType=JdbcType.VARCHAR),
        @Result(column="rpcid", property="rpcid", jdbcType=JdbcType.VARCHAR),
        @Result(column="method", property="method", jdbcType=JdbcType.VARCHAR),
        @Result(column="status", property="status", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.VARCHAR),
        @Result(column="requesturl", property="requesturl", jdbcType=JdbcType.VARCHAR),
        @Result(column="timeelapsed", property="timeelapsed", jdbcType=JdbcType.VARCHAR),
        @Result(column="createdt", property="createdt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="lev", property="lev", jdbcType=JdbcType.VARCHAR),
        @Result(column="ind", property="ind", jdbcType=JdbcType.VARCHAR)
    })
	List<InvokeChainBean> selectInvokeChainBySeq(Long invokeseq);
    
    @Select({
    	"select max(invoke_dt) invoke_dt from invokechain"
    })
	String getLastInvokeChainDt();
    
    @Select({
    	"select count(*) cont from invokechain where invoke_dt between '${category}:00' and '${category}:59' "
    })
	int getInvokeCount(@Param("category") String category);
    
    @Select({
    	"select count(*) cont from invokechain a where invoke_dt between '${category}:00' and '${category}:59' and ",
    	" exists(select 1 from invokechain where traceid=a.traceid and status!='OK') "
    })
	int getInvokeErrorCount(@Param("category") String category);
    
    @Select({
    	"SELECT * FROM invokechain  WHERE rpcid='0.1' AND TYPE='CONTROLLER' AND invoke_seq=#{id} "
    })
    @Results({
        @Result(column="invoke_seq", property="invoke_seq", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="invoke_dt", property="invoke_dt", jdbcType=JdbcType.VARCHAR),
        @Result(column="application", property="application", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromip", property="fromip", jdbcType=JdbcType.VARCHAR),
        @Result(column="ip", property="ip", jdbcType=JdbcType.VARCHAR),
        @Result(column="traceid", property="traceid", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromrpcid", property="fromrpcid", jdbcType=JdbcType.VARCHAR),
        @Result(column="rpcid", property="rpcid", jdbcType=JdbcType.VARCHAR),
        @Result(column="method", property="method", jdbcType=JdbcType.VARCHAR),
        @Result(column="status", property="status", jdbcType=JdbcType.VARCHAR),
        @Result(column="type", property="type", jdbcType=JdbcType.VARCHAR),
        @Result(column="requesturl", property="requesturl", jdbcType=JdbcType.VARCHAR),
        @Result(column="timeelapsed", property="timeelapsed", jdbcType=JdbcType.VARCHAR),
        @Result(column="createdt", property="createdt", jdbcType=JdbcType.TIMESTAMP)
    })
    List<InvokeChain> selectInvokeSlowRecordsById(String id);
}